/* CTF 1.8 */

typealias integer {size = 8; align = 8; signed = false; } := uint8_t;
typealias integer {size = 16; align = 8; signed = false; } := uint16_t;
typealias integer {size = 32; align = 8; signed = false; } := uint32_t;
typealias integer {size = 64; align = 8; signed = false; } := uint64_t;
typealias integer {size = 64; align = 8; signed = false; } := unsigned long;
typealias integer {size = 5; align = 8; signed = false; } := uint5_t;
typealias integer {size = 27; align = 8; signed = false; } := uint27_t;

trace {
	major = 1;
	minor = 8;
	byte_order = le;
	packet.header := struct {
		uint32_t magic;
		uint32_t stream_id;
	};
};

env {
	domain = "ust";
	tracer_name = "lttng-ust";
	tracer_major = 2;
	tracer_minor = 11;
	tracer_buffering_scheme = "uid";
	tracer_buffering_id = 1000;
	architecture_bit_width = 32;
	trace_name = "e31_hello";
	trace_creation_datetime = "20221101T202541India Standard Time";
	hostname = "LAPTOP-N370JV53";
};

clock {
	name = "monotonic";
	uuid = "cb35f5a5-f0a6-441f-b5c7-c7fb50c2e051";
	description = "Monotonic Clock";
	freq = 1000000000; /* Frequency, in Hz */
	/* clock value offset from Epoch is: offset * (1/freq) */
	offset = 1667314541000000000;
};

typealias integer {
	size = 27; align = 1; signed = false;
	map = clock.monotonic.value;
} := uint27_clock_monotonic_t;

typealias integer {
	size = 32; align = 8; signed = false;
	map = clock.monotonic.value;
} := uint32_clock_monotonic_t;

typealias integer {
	size = 64; align = 8; signed = false;
	map = clock.monotonic.value;
} := uint64_clock_monotonic_t;

struct packet_context {
	uint64_clock_monotonic_t timestamp_begin;
	uint64_clock_monotonic_t timestamp_end;
	uint64_t content_size;
	uint64_t packet_size;
	uint64_t packet_seq_num;
	unsigned long events_discarded;
	uint32_t cpu_id;
};

struct event_header_compact {
	enum : uint5_t { compact = 0 ... 30, extended = 31 } id;
	variant <id> {
		struct {
			uint27_clock_monotonic_t timestamp;
		} compact;
		struct {
			uint32_t id;
			uint64_clock_monotonic_t timestamp;
		} extended;
	} v;
} align(8);

struct event_header_large {
	enum : uint16_t { compact = 0 ... 65534, extended = 65535 } id;
	variant <id> {
		struct {
			uint32_clock_monotonic_t timestamp;
		} compact;
		struct {
			uint32_t id;
			uint64_clock_monotonic_t timestamp;
		} extended;
	} v;
} align(8);

stream {
	id = 0;
	event.header := struct event_header_large;
	packet.context := struct packet_context;
	event.context := struct {
		integer { size = 32; align = 8; signed = 1; encoding = none; base = 10; } _vpid;
		integer { size = 32; align = 8; signed = 1; encoding = none; base = 10; } _vtid;
		integer { size = 8; align = 8; signed = 1; encoding = UTF8; base = 10; } _procname[17];
	};
};

event {
	name = "lttng_ust_cyg_profile:func_entry";
	id = 1;
	stream_id = 0;
	loglevel = 12;
	fields := struct {
		integer { size = 64; align = 8; signed = 0; encoding = none; base = 16; } _addr;
		integer { size = 64; align = 8; signed = 0; encoding = none; base = 16; } _call_site;
	};
};

event {
	name = "lttng_ust_cyg_profile:func_exit";
	id = 2;
	stream_id = 0;
	loglevel = 12;
	fields := struct {
		integer { size = 64; align = 8; signed = 0; encoding = none; base = 16; } _addr;
		integer { size = 64; align = 8; signed = 0; encoding = none; base = 16; } _call_site;
	};
};

event {
	name = "lttng_ust_statedump:start";
	id = 3;
	stream_id = 0;
	loglevel = 13;
	fields := struct {
	};
};

event {
	name = "lttng_ust_statedump:bin_info";
	id = 4;
	stream_id = 0;
	loglevel = 13;
	fields := struct {
		integer { size = 64; align = 8; signed = 0; encoding = none; base = 16; } _baddr;
		integer { size = 64; align = 8; signed = 0; encoding = none; base = 10; } _memsz;
		string _path;
		integer { size = 8; align = 8; signed = 0; encoding = none; base = 10; } _is_pic;
		integer { size = 8; align = 8; signed = 0; encoding = none; base = 10; } _has_build_id;
		integer { size = 8; align = 8; signed = 0; encoding = none; base = 10; } _has_debug_link;
	};
};

event {
	name = "lttng_ust_statedump:end";
	id = 7;
	stream_id = 0;
	loglevel = 13;
	fields := struct {
	};
};

