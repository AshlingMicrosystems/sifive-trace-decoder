OBJS += ./dqr.o ./main.o ./trace.o vcd.o ./dqr_interface.o
INCLUDES += ../include/dqr.hpp ../include/trace.hpp ../include/dqr_interface.hpp
SWIGLIBOBJS += ./dqr_wrap.o ./dqr.o ./trace.o ./vcd.o ./dqr_interface.o
SWIGINCLUDES += ../include/dqr.i
SWIGCPP += ./dqr_wrap.cpp
SWIGOBJ += ./dqr_wrap.o
SWTOBJS += ./swt.o ./swt_main.o
SWTINCLUDES += ../include/swt.hpp

%.o: ../src/%.cpp $(INCLUDES)
	@echo 'Building file: $<'
	@echo 'Invoking: GCC C++ Compiler'
	$(CROSSPREFIX)g++ -I"../include" $(CFLAGS) -c -fmessage-length=0 -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@)" -o "$@" "$<"
	@echo 'Finished building: $<'
	@echo ' '

ifeq ($(OS),Windows_NT)
    PLATFORM = windows
    ifeq ($(BINUTILSPATH),)
        PICLIBS :=
        STATICLIBS :=
        LIBBFDOBJS :=
        LIBOPCODESOBJS :=
        LIBLIBERTYOBJS :=
    else
        PICLIBS :=
        STATICLIBS :=
        LIBBFDOBJS :=
        LIBOPCODESOBJS :=
        LIBLIBERTYOBJS :=
    endif
    SWIG = $(shell which swig 2> /dev/null)
    ifeq ($(SWIG),)
        $(info swig not found; skipping swig and dqr shared library build)
        SWIGLIB := 
        JNIINCLUDEPATHS :=
    else
        LIBSEARCHPATH := $(shell $(CROSSPREFIX)gcc -print-search-dirs | grep -i "libraries: =" 2> /dev/null)
        LIBSEARCHPATH2 := $(shell which $(CROSSPRIFIX)gcc 2> /dev/null)
        LIBSEARCHPATH2 := $(subst /gcc,/,$(LIBSEARCHPATH2))
        LIBSEARCHPATH := $(LIBSEARCHPATH) $(LIBSEARCHPATH2)
        LIBSEARCHPATH := $(patsubst libraries:%,%,$(LIBSEARCHPATH))
        LIBSEARCHPATH := $(patsubst =%,%,$(LIBSEARCHPATH))
        LIBSEARCHPATH := $(subst ;, ,$(LIBSEARCHPATH))
        MINGWLIBS := libgcc_s_seh*.dll libstdc++*.dll libwinpthread*.dll
        ifeq ($(JNIINCLUDE),)
            JAVAC = $(shell which javac 2> /dev/null)
            ifeq ($(JAVAC),)
                $(info javac not found; skipping swig and the dqr shared library build)
                JNIINCLUDE :=
                JNIINCLUDEPATH :=
            else
                JNIINCLUDE := $(patsubst %/bin/javac,%/include,$(realpath $(JAVAC)))
            endif
        endif
        ifeq ($(JNIINCLUDE),)
            $(info JNIINCLUDE not defined; skipping swig and dqr shared library build)
            SWIGLIB :=
            JNIINCLUDEPATHS :=
        else
            $(info using $(JNIINCLUDE) for JNIINCLUDE path)
            SWIGLIB := dqr.dll
            $(info building swig $(SWIGLIB))
            JNIINCLUDEPATHS := -I"$(JNIINCLUDE)" -I"$(JNIINCLUDE)\win32"
        endif
    endif
    CFLAGS += -D WINDOWS -std=c++11 -DDLL_EXPORT
    SWIGCFLAGS += -D WINDOWS -std=c++11
    PICLIBFLAGS :=
#    LNFLAGS = -static
    LNFLAGS =
    LIBS := -lws2_32
    SWTLIBS := -lws2_32 -lpthread
    EXECUTABLE := dqr.exe
    SWTEXECUTABLE := swt.exe
else
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)
        PLATFORM = linux
        ifeq ($(BINUTILSPATH),)
            PICLIBS :=
            STATICLIBS :=
            LIBBFDOBJS :=
            LIBOPCODESOBJS :=
            LIBLIBERTYOBJS :=
        else
            PICLIBS := 
            STATICLIBS :=
            LIBBFDOBJS :=
            LIBOPCODESOBJS :=
            LIBLIBERTYOBJS :=
        endif
        SWIG = $(shell which swig 2> /dev/null)
        ifeq ($(SWIG),)
            $(info swig not found; skipping swig and dqr shared library build)
            SWIGLIB := 
            JNIINCLUDE :=
            JNIINCLUDEPATHS :=
        else
            ifeq ($(JNIINCLUDE),)
                JAVAC = $(shell which javac 2> /dev/null)
                ifeq ($(JAVAC),)
                    $(info javac not found; skipping swig and the dqr shared library build)
                    JNIINCLUDE :=
                    JNIINCLUDEPATH :=
                else
                    JNIINCLUDE := $(patsubst %/bin/javac,%/include,$(realpath $(JAVAC)))
                endif
            endif
            ifeq ($(JNIINCLUDE),)
                $(info JNIINCLUDE not defined; skipping swig and dqr shared library build)
                SWIGLIB := 
                JNIINCLUDEPATHS :=
            else
                $(info using $(JNIINCLUDE) for JNIINCLUDE path)
                SWIGLIB := libdqr.so
                JNIINCLUDEPATHS := -I"$(JNIINCLUDE)" -I"$(JNIINCLUDE)/linux"
            endif
        endif
        REDHAT_REL := $(wildcard /etc/redhat-release)
        ifneq ($(REDHAT_REL),)
            CFLAGS += -D LINUX -std=c++11 -fPIC -DPIC
            SWIGCFLAGS += -D LINUX -std=c++11 -fPIC -DPIC
            LIBS :=
            SWTLIBS := -lpthread
#            PICLIBFLAGS := -L$(LIBPATH)/picbfd -L$(LIBPATH)/picopcodes -L$(LIBPATH)/picliberty
            PICLIBFLAGS :=
            LNFLAGS :=
            EXECUTABLE := dqr
            SWTEXECUTABLE := swt
        else
            ifeq ($(CROSSPREFIX),x86_64-w64-mingw32-)
                PLATFORM := windows
                ifeq ($(BINUTILSPATH),)
                    PICLIBS :=
                    STATICLIBS :=
                    LIBBFDOBJS :=
                    LIBOPCODESOBJS :=
                    LIBLIBERTYOBJS :=
                else
                    PICLIBS :=
                    STATICLIBS :=
                    LIBBFDOBJS :=
                    LIBOPCODESOBJS :=
                    LIBLIBERTYOBJS :=
                endif
                CFLAGS += -D WINDOWS -std=c++11
                SWIGCFLAGS += -D WINDOWS -std=c++11
                PICLIBFLAGS :=
                LNFLAGS =
		LIBS := -lws2_32
                SWTLIBS := -lws2_32 -lpthread
                EXECUTABLE := dqr.exe
                SWTEXECUTABLE := swt.exe
                LIBSEARCHPATH := $(shell $(CROSSPREFIX)gcc -print-search-dirs | grep -i "libraries: =" 2> /dev/null)
                LIBSEARCHPATH := $(patsubst libraries:%,%,$(LIBSEARCHPATH))
                LIBSEARCHPATH := $(patsubst =%,%,$(LIBSEARCHPATH))
                LIBSEARCHPATH := $(subst :, ,$(LIBSEARCHPATH))
                MINGWLIBS := libgcc_s_seh*.dll libstdc++*.dll libwinpthread*.dll
                ifneq ($(SWIGLIB),)
                    SWIGLIB := dqr.dll
                endif
            else
                CFLAGS += -D LINUX -std=c++11 -fPIC -DPIC
                SWIGCFLAGS += -D LINUX -std=c++11 -fPIC -DPIC
#                PICLIBFLAGS := -L$(LIBPATH)/picbfd -L$(LIBPATH)/picopcodes -L$(LIBPATH)/picliberty
                PICLIBFLAGS :=
                LIBS :=
                SWTLIBS := -lpthread
                LNFLAGS =
                EXECUTABLE := dqr
                SWTEXECUTABLE := swt
            endif
        endif
    endif
    ifeq ($(UNAME_S),Darwin)
        PLATFORM = macos
        ifeq ($(BINUTILSPATH),)
            PICLIBS :=
            STATICLIBS :=
            LIBBFDOBJS :=
            LIBOPCODESOBJS :=
            LIBLIBERTYOBJS :=
        else
            PICLIBS :=
            STATICLIBS :=
            LIBBFDOBJS :=
            LIBOPCODESOBJS :=
            LIBLIBERTYOBJS :=
        endif
        SWIG = $(shell which swig 2> /dev/null)
        ifeq ($(SWIG),)
            $(info swig not found; skipping swig and dqr shared library build)
            SWIGLIB := 
            JNIINCLUDEPATHS :=
        else
            ifeq ($(JNIINCLUDE),)
                JAVAC = $(shell which javac 2> /dev/null)
                ifeq ($(JAVAC),)
                    $(info javac not found; skipping swig and the dqr shared library build)
                    JNIINCLUDE :=
                    JNIINCLUDEPATH :=
                else
                    # JPATH := $(dir $(realpath $(JAVAC)))
                    # $(info JPATH $(JPATH))
                    # JHOME := $(shell $(JPATH)java_home 2> /dev/null)
                    # $(info JHOME $(JHOME))
                    # JNIINCLUDE := $(JHOME)/include

                    JHOME := $(shell /usr/libexec/java_home 2> /dev/null)
                    $(info JHOME $(JHOME))
                    JNIINCLUDE := $(JHOME)/include
                    $(info JNIINCLUDE $(JNIINCLUDE))
                    JNIINCLUDEPATHS := -I"$(JNIINCLUDE)" -I"$(JNIINCLUDE)/darwin"
                    $(info JNIINCLUDEPATHS $(JNIINCLUDEPATHS))

                endif
            endif
            ifeq ($(JNIINCLUDE),)
                $(info JNIINCLUDE not defined; skipping swig and dqr shared library build)
                SWIGLIB :=
                JNIINCLUDEPATHS :=
            else
                $(info using $(JNIINCLUDE) for JNIINCLUDE path)
                SWIGLIB := libdqr.dylib
                JNIINCLUDEPATHS := -I"$(JNIINCLUDE)" -I"$(JNIINCLUDE)/darwin"
            endif
        endif
        CFLAGS += -D OSX -std=c++11
        SWIGCFLAGS += -D OSX -std=c++11
        PICLIBFLAGS :=
        LIBS :=
        SWTLIBS := -lpthread
        LNFLAGS =
        EXECUTABLE := dqr
        SWTEXECUTABLE := swt
    endif
    UNAME_P := $(shell uname -p)
endif
